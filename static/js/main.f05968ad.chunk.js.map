{"version":3,"sources":["components/Container/index.js","components/Header/index.js","components/Nav/index.js","components/Topdiv/index.js","components/ImageCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","children","Header","Nav","href","message","topScore","score","Topdiv","ImageCard","src","image","id","alt","name","key","onClick","clickImage","App","state","images","maxScore","isCorrect","console","log","clickedImage","filter","clicked","incorrectClick","correctClick","shuffleImages","setState","sort","a","b","Math","random","reset","i","length","this","map","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f05968ad.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Container(props) {\r\n    return (\r\n        <div className=\"container\">{props.children}</div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\n\r\nfunction Header(props) {\r\n    return (\r\n       \r\n        <h1 className=\"font-weight-bold d-inline ml-3\">{props.children}</h1>\r\n  \r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Nav(props) {\r\n    return (\r\n        <div>\r\n            \r\n            <ul className=\"nav justify-content-end\">\r\n            <li className=\"nav-item\">\r\n                    <h2 className=\"nav-link active font-weight-bold\" href=\"#\"> {props.message}</h2>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <h3 className=\"nav-link active\" href=\"#\">Top Score: {props.topScore}</h3>\r\n                </li>\r\n                  \r\n                <li className=\"nav-item\">\r\n                    <h3 className=\"nav-link active\" href=\"#\">Score: {props.score}</h3>\r\n                </li>\r\n  \r\n            </ul>\r\n        </div>\r\n\r\n        \r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Nav;","import React from \"react\";\r\n\r\nimport Header from \"../Header\"\r\n\r\nimport Nav from \"../Nav\"\r\n\r\n\r\nfunction Topdiv(props) {\r\n    return (\r\n        <div className=\"d-flex justify-content-between border sticky-top bg-white\">\r\n\r\n            <Header>CLICKY GAME</Header>\r\n            <Nav\r\n              message={props.message}\r\n              topScore={props.topScore}\r\n              score={props.score}\r\n            />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Topdiv;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ImageCard(props) {\r\n    return ( \r\n      \r\n      <div className=\"cardDiv\">\r\n        <div className=\"card\">\r\n            <img src={props.image} className=\"card-img-top\" id={props.id} alt={props.name} key={props.id} onClick={() => props.clickImage(props.id)} />\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default ImageCard;\r\n\r\n\r\n\r\n\r\n\r\n//{/* <div className=\"card\">\r\n   //         <div className=\"card-body\">\r\n    //            <img className=\"card-img\" src={props.image} alt={props.name} />\r\n    //        </div>\r\n     //       <div className=\"card-footer\">\r\n     //           {props.name}\r\n     //       </div>\r\n     //   </div> */}","import React from \"react\";\n\nimport Container from \"./components/Container\";\n\nimport Topdiv from \"./components/Topdiv\";\n\nimport ImageCard from \"./components/ImageCard\";\n\nimport images from \"./images.json\";\n\n\n// the App class\n\nclass App extends React.Component {\n\n  // variables in state obj\n  \n  state = {\n\n    images: images,\n    score: 0,\n    topScore: 0,\n    maxScore: 8,\n    isCorrect: true,\n    message:\"\"\n  }\n\n\n// click method with id parameter\n\n  clickImage = id => {\n\n    console.log(id)\n\n    const character = this.state.images;\n\n    // store clicked image in an array clickedImage\n\n    const clickedImage = character.filter(image => image.id === id);\n\n    // if statement to check if clicked field is true or false\n\n    if (!clickedImage[0].clicked) {\n\n      // switch clicked to true\n\n      clickedImage[0].clicked = true;\n\n      console.log(clickedImage)\n\n      // call correct click method to update state\n\n      this.correctClick();\n\n      // shuffle the images\n\n      this.shuffleImages(images);\n\n      // update state\n\n      this.setState({images})\n\n    }else{\n\n      // incorrect click method if clicked field is already true\n\n      this.incorrectClick()\n\n    }  \n\n\n  }\n\n\n  // this method shuffles images if user clicked right\n\n  shuffleImages = images => {\n\n    images.sort((a, b) => {\n\n      return 0.5 - Math.random();\n\n    });\n\n  }\n\n\n  // when user clicks right this method is called\n\n  correctClick = () => {\n\n    // update isCorrect\n    \n    this.setState({isCorrect: true})\n\n    \n\n    // updating top score\n\n    if (this.state.score + 1 > this.state.topScore) {\n\n      this.setState({ topScore: this.state.topScore + 1 });\n\n    }\n\n    // update score and check if the game is won or lost\n\n    if (this.state.score + 1 >= this.state.maxScore) {\n      \n      this.setState({\n\n        score: this.state.score + 1,\n\n        message: \"CONGRATS! YOU WIN!!!\",\n\n        topScore: 0\n\n      });\n\n      this.reset()\n\n    } else {\n\n      this.setState({\n\n        score: this.state.score + 1,\n\n        message: \"YOU CLICKED CORRECTLY!\"\n      });\n    }\n  }\n\n\n  // when the user guesses wrong, this method is called\n\n  incorrectClick = () => {\n\n    this.setState({\n\n      isCorrect: false,\n\n      message: \"WRONG! WRONG!! WRONG!!!\"\n    \n    })\n\n    this.reset();\n\n  }\n\n\n  // method that resets the game\n\n  reset = () => {\n\n    const images = this.state.images;\n\n    for (let i = 0; i < images.length; i++) {\n\n      images[i].clicked = false;\n\n    }\n\n    this.setState({ score: 0 });\n\n  }\n\n\n\n  // method that renders the components on the page\n\n  render () {\n\n    return (\n      <Container>\n        <Topdiv \n          message={this.state.message}\n          topScore={this.state.topScore}\n          score={this.state.score}\n        />\n        {this.state.images.map(image => (\n        \n          <ImageCard\n            clickImage={this.clickImage}          \n            key={image.id}\n            id={image.id}\n            name={image.name}      \n            image={image.image}              \n          />\n        ))}\n       \n      </Container>\n    )\n  }\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}